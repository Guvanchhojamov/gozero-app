// Code generated by goctl. DO NOT EDIT.
// Source: products.proto

package productservice

import (
	"context"

	"github.com/Guvanchhojamov/gozero-app/gateway/services/products/rpc/v1"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateProductRequest   = v1.CreateProductRequest
	CreateProductResponse  = v1.CreateProductResponse
	DeleteProductRequest   = v1.DeleteProductRequest
	DeleteProductResponse  = v1.DeleteProductResponse
	GetProductByIdRequest  = v1.GetProductByIdRequest
	GetProductByIdResponse = v1.GetProductByIdResponse
	GetProductsRequest     = v1.GetProductsRequest
	GetProductsResponse    = v1.GetProductsResponse
	Product                = v1.Product
	UpdateProductRequest   = v1.UpdateProductRequest
	UpdateProductResponse  = v1.UpdateProductResponse

	ProductService interface {
		GetProducts(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*GetProductsResponse, error)
		GetProductById(ctx context.Context, in *GetProductByIdRequest, opts ...grpc.CallOption) (*GetProductByIdResponse, error)
		CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
		UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error)
		DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*DeleteProductResponse, error)
	}

	defaultProductService struct {
		cli zrpc.Client
	}
)

func NewProductService(cli zrpc.Client) ProductService {
	return &defaultProductService{
		cli: cli,
	}
}

func (m *defaultProductService) GetProducts(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*GetProductsResponse, error) {
	client := v1.NewProductServiceClient(m.cli.Conn())
	return client.GetProducts(ctx, in, opts...)
}

func (m *defaultProductService) GetProductById(ctx context.Context, in *GetProductByIdRequest, opts ...grpc.CallOption) (*GetProductByIdResponse, error) {
	client := v1.NewProductServiceClient(m.cli.Conn())
	return client.GetProductById(ctx, in, opts...)
}

func (m *defaultProductService) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	client := v1.NewProductServiceClient(m.cli.Conn())
	return client.CreateProduct(ctx, in, opts...)
}

func (m *defaultProductService) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error) {
	client := v1.NewProductServiceClient(m.cli.Conn())
	return client.UpdateProduct(ctx, in, opts...)
}

func (m *defaultProductService) DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*DeleteProductResponse, error) {
	client := v1.NewProductServiceClient(m.cli.Conn())
	return client.DeleteProduct(ctx, in, opts...)
}
